# require 'rails_helper'
#
# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to test the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator. If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails. There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# RSpec.describe "/api/v1/inventory_items", type: :request do
#   # This should return the minimal set of attributes required to create a valid
#   # InventoryItem. As you add validations to InventoryItem, be sure to
#   # adjust the attributes here as well.
#   let(:valid_attributes) {
#     skip("Add a hash of attributes valid for your model")
#   }
#
#   let(:invalid_attributes) {
#     skip("Add a hash of attributes invalid for your model")
#   }
#
#   # This should return the minimal set of values that should be in the headers
#   # in order to pass any filters (e.g. authentication) defined in
#   # InventoryItemsController, or in your router and rack
#   # middleware. Be sure to keep this updated too.
#   let(:valid_headers) {
#     {}
#   }
#
#   describe "GET /index" do
#     it "renders a successful response" do
#       InventoryItem.create! valid_attributes
#       get inventory_items_url, headers: valid_headers, as: :json
#       expect(response).to be_successful
#     end
#   end
#
#   describe "GET /show" do
#     it "renders a successful response" do
#       inventory_item = InventoryItem.create! valid_attributes
#       get inventory_item_url(inventory_item), as: :json
#       expect(response).to be_successful
#     end
#   end
#
#   describe "POST /create" do
#     context "with valid parameters" do
#       it "creates a new InventoryItem" do
#         expect {
#           post inventory_items_url,
#                params: { inventory_item: valid_attributes }, headers: valid_headers, as: :json
#         }.to change(InventoryItem, :count).by(1)
#       end
#
#       it "renders a JSON response with the new inventory_item" do
#         post inventory_items_url,
#              params: { inventory_item: valid_attributes }, headers: valid_headers, as: :json
#         expect(response).to have_http_status(:created)
#         expect(response.content_type).to match(a_string_including("application/json"))
#       end
#     end
#
#     context "with invalid parameters" do
#       it "does not create a new InventoryItem" do
#         expect {
#           post inventory_items_url,
#                params: { inventory_item: invalid_attributes }, as: :json
#         }.to change(InventoryItem, :count).by(0)
#       end
#
#       it "renders a JSON response with errors for the new inventory_item" do
#         post inventory_items_url,
#              params: { inventory_item: invalid_attributes }, headers: valid_headers, as: :json
#         expect(response).to have_http_status(:unprocessable_entity)
#         expect(response.content_type).to match(a_string_including("application/json"))
#       end
#     end
#   end
#
#   describe "PATCH /update" do
#     context "with valid parameters" do
#       let(:new_attributes) {
#         skip("Add a hash of attributes valid for your model")
#       }
#
#       it "updates the requested inventory_item" do
#         inventory_item = InventoryItem.create! valid_attributes
#         patch inventory_item_url(inventory_item),
#               params: { inventory_item: new_attributes }, headers: valid_headers, as: :json
#         inventory_item.reload
#         skip("Add assertions for updated state")
#       end
#
#       it "renders a JSON response with the inventory_item" do
#         inventory_item = InventoryItem.create! valid_attributes
#         patch inventory_item_url(inventory_item),
#               params: { inventory_item: new_attributes }, headers: valid_headers, as: :json
#         expect(response).to have_http_status(:ok)
#         expect(response.content_type).to match(a_string_including("application/json"))
#       end
#     end
#
#     context "with invalid parameters" do
#       it "renders a JSON response with errors for the inventory_item" do
#         inventory_item = InventoryItem.create! valid_attributes
#         patch inventory_item_url(inventory_item),
#               params: { inventory_item: invalid_attributes }, headers: valid_headers, as: :json
#         expect(response).to have_http_status(:unprocessable_entity)
#         expect(response.content_type).to match(a_string_including("application/json"))
#       end
#     end
#   end
#
#   describe "DELETE /destroy" do
#     it "destroys the requested inventory_item" do
#       inventory_item = InventoryItem.create! valid_attributes
#       expect {
#         delete inventory_item_url(inventory_item), headers: valid_headers, as: :json
#       }.to change(InventoryItem, :count).by(-1)
#     end
#   end
# end
